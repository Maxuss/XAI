import json
import sys
import os
import collections
from dev import *
import exceptions
from decouple import config
devmsg = Dev.SendMessage()
pathto = str(config('XAI_PATH'))
devmsg("Loading anti-exploits")
with open(pathto +  "\\ref\\exploits\\exploited.json", 'r') as exp:
    exploit_data = json.load(exp)

devmsg("Loading ExploitCheck class")
class ExploitCheck():
    def __call__(self):
        self.checking()
        pass
    
    exploit_checking_files = [
        "\\data.json",
        "\\ref\\lootgen\\loot_tables.json", "\\ref\\mobgen\\mobgen_referrer.json",
        "\\ref\\boss_referrer.json", "\\ref\enemy_referrer.json", 
        "\\ref\\loc_referrer.json", "\\playerdata\\player1.json", 
        "\\playerdata\\player2.json", "\\playerdata\\player3.json",
        "\\data\\dialogues.json", "\\data\\enemies.json", "\\data\\items.json",
        "\\data\\loc.json", "\\data\\rewards.json", "\\quests\\qhub.json"
    ]

    callable_exploit_database = {
        "INSANE_VALUES": "self.insaneval()",
        "FILE_CORRUPTOR": "self.filecorrupt()",
        "DATA_MODIFYING": "self.datamodify()"
    }
    
    def filecorrupt(self):
        for i in range(0, len(self.exploit_checking_files)-1):            
            with open(pathto + self.exploit_checking_files[i], 'r') as file:
                current = json.load(file)
            if "CORR" in current:
                raise exceptions.FileErrors.FileCorruptedError("Found corrupted file. Stopping.")
        devmsg("Passed corrupt files test")

    def datamodify(self):
        with open(pathto + "\\datasave.xai", 'r') as file:
            savedat = json.load(file)
        fd = savedat["filedata"]
        is_edited = fd["?files_edited"]
        if is_edited:
            devmsg("Files were edited!")
            devmsg("File editor: " + fd["?editor"])
            raise exceptions.FileErrors.IllegalFileManipulations("Illegal file manipulations!")
        else:
            devmsg("Passed file manipulation test.")
    def insaneval(self):
        for i in range(0, len(self.exploit_checking_files)-1):            
            with open(pathto + self.exploit_checking_files[i], 'r') as file:
                current = json.load(file)
            for a in current:
                try:
                    checkdict = dict(current[a])
                    for b in checkdict:
                        try:
                            if checkdict[b] >= 9999:
                                current[b] = 0
                                devmsg("Found insane value!")
                                with open(pathto + self.exploit_checking_files[i], 'w') as file:
                                    json.dump(current, file, indent=4, sort_keys=True, ensure_ascii=False)
                            else:
                                pass
                        except TypeError:
                            pass
                        except ValueError:
                            pass
                except TypeError:
                    try:
                        if current[a] >= 9999:
                            current[a] = 0
                            devmsg("Found insane value!")
                            with open(pathto + self.exploit_checking_files[i], 'w') as file:
                                json.dump(current, file, indent=4, sort_keys=True, ensure_ascii=False)
                        else:
                            pass
                    except TypeError:
                        pass
                    except ValueError:
                        pass
                except ValueError:
                    try:
                        if current[a] >= 9999:
                            current[a] = 0
                            devmsg("Found insane value!")
                            with open(pathto + self.exploit_checking_files[i], 'w') as file:
                                json.dump(current, file, indent=4, sort_keys=True, ensure_ascii=False)
                        else:
                            pass
                    except TypeError:
                        pass
                    except ValueError:
                        pass
            devmsg("Passed insane val test for file " + self.exploit_checking_files[i])
        devmsg("Finished insane val test!")
    def fed(self): # finds exploits data and executes
        self.forbidden_exploits = exploit_data["FORBIDDEN"]
        for i in self.forbidden_exploits:
            exec(self.callable_exploit_database[i])

    def checking(self):
        self.isallowed = exploit_data["?EXPLOIT_ALLOW"] 
        if self.isallowed:
            devmsg("Exploits allowed for some reason. File modifying warning!")
        else:
            self.fed()

devmsg("Finished loading Anti-Exploits!")
